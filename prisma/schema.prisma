generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum AccountType {
  user
  student
  academy
}

enum imageStorageProvider {
  firebase
  aws
  others
}

enum Day {
  sat
  sun
  mon
  tue
  wed
  thu
  fri
}

model AccountData {
  id             String  @id @default(uuid())
  accountID      Account @relation("AccountDataOwner", fields: [ownerAccountId], references: [id], onDelete: Cascade)
  ownerAccountId String  @unique
}

// The Account model represents a user or account in the system
model Account {
  id                        String                @id @default(uuid()) // Unique identifier for the account
  username                  String                @unique // Unique username for the account
  name                      String // Name of the account holder
  about                     String? // Optional about section
  email                     String                @unique // Unique email for the account
  phone                     String?               @unique // Optional unique phone number for the account
  image                     String? // Optional image URL for the account
  imageStorageProvider      imageStorageProvider? // Enum or string for image storage provider
  coverImage                String? // Optional cover image URL for the account
  coverImageStorageProvider imageStorageProvider? // Enum or string for cover image storage provider
  password                  String? // Optional password for the account
  accountType               AccountType           @default(user) // Default to user account type
  googleSignIn              Boolean               @default(false) // Whether the account uses Google sign-in
  lastLoginTime             DateTime? // Optional timestamp for the last login
  accountData               AccountData?          @relation("AccountDataOwner") // Optional relation to AccountData model
  createdRoutines           Routine[]             @relation("AccountCreatedRoutines") // Routines created by this account
  routineMemberships        RoutineMember[]       @relation("AccountRoutineMemberships") // Memberships of the account in routines
  savedRoutines             Routine[]             @relation("AccountSavedRoutines") // Routines saved by this account

  createdAt DateTime @default(now()) // Timestamp when the account was created
  updatedAt DateTime @updatedAt // Timestamp when the account was last updated

  RoutinesJoinRequest RoutinesJoinRequest[]
  Summary             Summary[]
}

// The Routine model represents a routine or group in the system

model RoutinesJoinRequest {
  id               String  @id @default(uuid())
  requestMessage   String?
  requestedAccount Account @relation(fields: [accountIdBy], references: [id], onDelete: Cascade) // Cascade delete when the account is deleted

  // Relation to the Routine the request is for
  routineId String // ID of the routine the join request is for
  routine   Routine @relation(fields: [routineId], references: [id], onDelete: Cascade) // Cascade delete when the routine is deleted

  createdAt   DateTime @default(now())
  accountIdBy String
}

model Weekday {
  id        String   @id @default(uuid()) // Primary key
  routineId String // Foreign key to Routine
  routine   Routine  @relation("RoutineWeekdays", fields: [routineId], references: [id], onDelete: Cascade) // Relation to Routine
  classId   String // Foreign key to Class
  class     Class    @relation("ClassWeekdays", fields: [classId], references: [id], onDelete: Cascade) // Relation to Class
  room      String // Room information
  Day       Day // select day by enum
  startTime DateTime // Start time for the first shift
  endTime   DateTime // End time for the first shift
  createdAt DateTime @default(now()) // Auto-generated timestamp for creation
  updatedAt DateTime @updatedAt // Auto-generated timestamp for updates
}

model RoutineMember {
  id             String   @id @default(uuid())
  accountId      String // Account ID of the member
  routineId      String // Routine ID
  member         Account  @relation("AccountRoutineMemberships", fields: [accountId], references: [id])
  routine        Routine  @relation("RoutineMembers", fields: [routineId], references: [id])
  notificationOn Boolean  @default(false)
  captain        Boolean  @default(false)
  owner          Boolean  @default(false)
  isSaved        Boolean  @default(false)
  blacklist      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Routine {
  id             String          @id @default(uuid()) // Unique identifier for the routine
  routineName    String // Name of the routine
  routineOwner   Account         @relation("AccountCreatedRoutines", fields: [ownerAccountId], references: [id]) // Relation to the account who created the routine
  ownerAccountId String // ID of the account that created the routine
  routineMembers RoutineMember[] @relation("RoutineMembers") // Members of the routine
  classes        Class[]         @relation("RoutineClasses") // Classes associated with the routine
  weekdays       Weekday[]       @relation("RoutineWeekdays") // Weekdays associated with the routine
  createdAt      DateTime        @default(now()) // Timestamp when the routine was created
  updatedAt      DateTime        @updatedAt // Timestamp when the routine was last updated

  savedBy             Account[]             @relation("AccountSavedRoutines") // Accounts that saved the routine
  accountId           String? // Optional ID of the account associated with the routine (if applicable)
  RoutinesJoinRequest RoutinesJoinRequest[] // Requests to join the routine
  Summary             Summary[]
}

model Class {
  id             String    @id @default(uuid()) // Primary key
  name           String
  instructorName String
  subjectCode    String
  routineId      String // Foreign key to Routine
  routine        Routine   @relation("RoutineClasses", fields: [routineId], references: [id], onDelete: Cascade) // Relation to Routine
  weekdays       Weekday[] @relation("ClassWeekdays") // Relation to Weekday
  createdAt      DateTime  @default(now()) // Auto-generated timestamp for creation
  updatedAt      DateTime  @updatedAt // Auto-generated timestamp for updates
  Summary        Summary[]
}

model Summary {
  id                   String                @id @default(uuid())
  ownerId              String
  text                 String
  imageLinks           String[]
  imageStorageProvider imageStorageProvider?
  routineId            String
  classId              String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt

  // Relations
  owner   Account @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  routine Routine @relation(fields: [routineId], references: [id], onDelete: Cascade)
  class   Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
}
